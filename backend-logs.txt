
> pa9@1.0.0 start-ts
> ts-node ./src/server.ts





___ Listening at 127.0.0.1 on port 5000. ___ 








___ Mongoose Client Constructed ___ 




<ref *1> Mongoose {
  connections: [
    NativeConnection {
      base: [Circular *1],
      collections: [Object],
      models: [Object],
      config: {},
      replica: false,
      options: null,
      otherDbs: [],
      relatedDbs: {},
      states: [Object: null prototype],
      _readyState: 1,
      _closeCalled: undefined,
      _hasOpened: true,
      plugins: [],
      id: 0,
      _queue: [],
      _listening: false,
      _connectionString: 'mongodb://localhost:27017/ostaa',
      _connectionOptions: [Object],
      name: 'ostaa',
      host: 'localhost',
      port: 27017,
      user: undefined,
      pass: undefined,
      client: [MongoClient],
      '$initialConnection': [Promise],
      db: [Db]
    }
  ],
  models: {
    item: [Function: model] {
      hooks: [Kareem],
      base: [Circular *1],
      modelName: 'item',
      model: [Function: model],
      db: [NativeConnection],
      discriminators: undefined,
      events: [EventEmitter],
      '$appliedMethods': true,
      '$appliedHooks': true,
      _middleware: [Kareem],
      '$__insertMany': [Function (anonymous)],
      schema: [Schema],
      collection: [NativeCollection],
      '$__collection': [NativeCollection],
      Query: [Function],
      '$init': [Promise],
      '$caught': true,
      [Symbol(mongoose#Model)]: true
    },
    user: [Function: model] {
      hooks: [Kareem],
      base: [Circular *1],
      modelName: 'user',
      model: [Function: model],
      db: [NativeConnection],
      discriminators: undefined,
      events: [EventEmitter],
      '$appliedMethods': true,
      '$appliedHooks': true,
      _middleware: [Kareem],
      '$__insertMany': [Function (anonymous)],
      schema: [Schema],
      collection: [NativeCollection],
      '$__collection': [NativeCollection],
      Query: [Function],
      '$init': [Promise],
      '$caught': true,
      [Symbol(mongoose#Model)]: true
    }
  },
  modelSchemas: {
    item: Schema {
      obj: [Object],
      paths: [Object],
      aliases: {},
      subpaths: {},
      virtuals: [Object],
      singleNestedPaths: {},
      nested: {},
      inherits: {},
      callQueue: [],
      _indexes: [],
      methods: {},
      methodOptions: {},
      statics: {},
      tree: [Object],
      query: {},
      childSchemas: [],
      plugins: [Array],
      '$id': 1,
      mapPaths: [],
      s: [Object],
      _userProvidedOptions: {},
      options: [Object],
      '$globalPluginsApplied': true
    },
    user: Schema {
      obj: [Object],
      paths: [Object],
      aliases: {},
      subpaths: [Object],
      virtuals: [Object],
      singleNestedPaths: {},
      nested: {},
      inherits: {},
      callQueue: [],
      _indexes: [],
      methods: {},
      methodOptions: {},
      statics: {},
      tree: [Object],
      query: {},
      childSchemas: [],
      plugins: [Array],
      '$id': 2,
      mapPaths: [],
      s: [Object],
      _userProvidedOptions: {},
      options: [Object],
      '$globalPluginsApplied': true
    }
  },
  events: EventEmitter {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    [Symbol(kCapture)]: false
  },
  options: {
    pluralization: true,
    autoIndex: true,
    useCreateIndex: false,
    [Symbol(mongoose:default)]: true
  },
  _pluralize: [Function: pluralize],
  Schema: [Function: Schema] {
    reserved: [Object: null prototype] {
      validate: 1,
      toObject: 1,
      save: 1,
      remove: 1,
      populated: 1,
      isNew: 1,
      isModified: 1,
      init: 1,
      get: 1,
      errors: 1,
      collection: 1,
      removeListener: 1,
      on: 1,
      listeners: 1,
      emit: 1,
      prototype: 1
    },
    Types: {
      String: [Function],
      Number: [Function],
      Boolean: [Function],
      DocumentArray: [Function],
      Embedded: [Function],
      Array: [Function],
      Buffer: [Function],
      Date: [Function],
      ObjectId: [Function],
      Mixed: [Function],
      Decimal: [Function],
      Decimal128: [Function],
      Map: [Function],
      Oid: [Function],
      Object: [Function],
      Bool: [Function],
      ObjectID: [Function]
    },
    ObjectId: [Function: ObjectId] {
      schemaName: 'ObjectId',
      defaultOptions: {},
      get: [Function (anonymous)],
      set: [Function: set],
      _checkRequired: [Function (anonymous)],
      _cast: [Function: castObjectId],
      cast: [Function: cast],
      _defaultCaster: [Function (anonymous)],
      checkRequired: [Function (anonymous)]
    }
  },
  model: [Function (anonymous)],
  plugins: [
    [ [Function (anonymous)], [Object] ],
    [ [Function (anonymous)], [Object] ],
    [ [Function], [Object] ],
    [ [Function (anonymous)], [Object] ],
    [ [Function: trackTransaction], [Object] ]
  ]
}
